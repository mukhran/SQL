09/21

Unique Users Per Client Per Month id 2024

Write a query that returns the number of unique users per client per month (easy)

Table: fact_events

fact_events

id:
int
time_id:
datetime
user_id:
varchar
customer_id:
varchar
client_id:
varchar
event_type:
varchar
event_id:
int

select count(distinct user_id) as number_uniq, client_id, EXTRACT(month from time_id) as month
from fact_events
group by client_id, month


------------------------------------------------------------------------

First Name's Containing the Letter 'a'  easy

Find all workers whose first name contains the letter 'a'. Output all columns for such workers.

Table: worker

worker
Preview
worker_id:
int
first_name:
varchar
last_name:
varchar
salary:
int
joining_date:
datetime
department:
varchar

select *
from worker
where lower(first_name) LIKE '%a%'

------------------------------------------------------------------------


Submission Types (B) id2002  easy
Write a query that returns the user ID of all users that have created at least one ‘Refinance’ submission 
and at least one ‘InSchool’ submission.

Table: loans

id:
int
user_id:
int
created_at:
datetime
status:
varchar
type:
varchar

select user_id
from loans
where type IN ('Refinance','InSchool')
group by user_id
having count(distinct type) >=2



SELECT user_id
FROM loans
WHERE type = 'Refinance'
INTERSECT
SELECT user_id
FROM loans
WHERE type = 'InSchool'

------------------------------------------------------------------------


Find all companies with more than 10 employees  easy
google_adwords_earnings

Preview
business_type:
varchar
n_employees:
int
year:
int
adwords_earnings:
int

select *
from google_adwords_earnings
where n_employees > 10

------------------------------------------------------------------------

Number Of Bathrooms And Bedrooms easy

Find the average number of bathrooms and bedrooms for each city’s property types. 
Output the result along with the city name and the property type.

Table: airbnb_search_details

airbnb_search_details

Unnamed: 0: int
id: int
price: float
property_type:
varchar
room_type:
varchar
amenities:
varchar
accommodates:
int
bathrooms:
int
bed_type:
varchar
cancellation_policy:
varchar
cleaning_fee:
bool
city:
varchar
host_identity_verified:
varchar
host_response_rate:
varchar
host_since:
datetime
neighbourhood:
varchar
number_of_reviews:
int
review_scores_rating:
float
zipcode:
int
bedrooms:
int
beds:
int

select city, property_type, AVG(bathrooms) as avg_bathrooms, AVG(bedrooms) as avg_bedrooms
from airbnb_search_details
group by city, property_type

------------------------------------------------------------------------

Number of Shipments Per Month id2056 easy

Write a query that will calculate the number of shipments per month. 
The unique key for one shipment is a combination of shipment_id and sub_id. 
Output the year_month in format YYYY-MM and the number of shipments in that month.

postgresql

amazon_shipment

shipment_id:
int
sub_id:
int
weight:
int
shipment_date:
datetime


select to_char(shipment_date, 'YYYY-MM') AS year_month,
       count(distinct (shipment_id, sub_id))
from amazon_shipment
group by year_month




------------------------------------------------------------------------


09/22 

Employees With First Names 'Vipul' or 'Satish' or Last Name Containing a 'c'

Employees Without First Names 'Vipul' or 'Satish' or Last Name Containing a 'c'


worker
Preview
worker_id:
int
first_name:
varchar
last_name:
varchar
salary:
int
joining_date:
datetime
department:
varchar

select *
from worker
WHERE first_name in ('Vipul','Satish') or lower(last_name) LIKE '%c%'

select *
from worker
WHERE first_name not in ('Vipul','Satish') and lower(last_name) NOT LIKE '%c%'

------------------------------------------------------------------------

Find all athletes who were older than 40 years when they won either Bronze or Silver medals

olympics_athletes_events
Preview
id:
int
name:
varchar
sex:
varchar
age:
float
height:
float
weight:
datetime
team:
varchar
noc:
varchar
games:
varchar
year:
int
season:
varchar
city:
varchar
sport:
varchar
event:
varchar
medal:
varchar

select name
from olympics_athletes_events
WHERE age > 40 and medal IN ('Bronze', 'Silver')

------------------------------------------------------------------------


Find all facilities with the zip code 90049, 90034, or 90045.

los_angeles_restaurant_health_inspections
Preview
serial_number:
varchar
activity_date:
datetime
facility_name:
varchar
score:
int
grade:
varchar
service_code:
int
service_description:
varchar
employee_id:
varchar
facility_address:
varchar
facility_city:
varchar
facility_id:
varchar
facility_state:
varchar
facility_zip:
varchar
owner_id:
varchar
owner_name:
varchar
pe_description:
varchar
program_element_pe:
int
program_name:
varchar
program_status:
varchar
record_id:
varcha

select DISTINCT(facility_name)
from los_angeles_restaurant_health_inspections
where facility_zip IN ('90049','90034','90045')

------------------------------------------------------------------------

09/26
Wine Variety Revenues medium
Find the total revenue made by each region from each variety of wine in that region. Output the region, variety, and total revenue.


Take into calculation both region_1 and region_2. Remove the duplicated rows where  region, price and variety are exactly the same.

SELECT region, SUM(price), variety
FROM 
    (SELECT region_1 as region,
    price,
    variety
    FROM winemag_p1

    UNION
    SELECT region_2 as region,
    price,
    variety
    FROM winemag_p1) as temp
WHERE region IS NOT NULL AND price IS NOT NULL 
GROUP BY region, variety

-----------------------------------------------------------------------

Total wine revenue medium

You have a dataset of wines. Find the total revenue made by each winery and variety that always have at least 90 points. Meaning that in each row for the winery, variety pair number of points should be at least 90 in order for that pair to be considered in the calculation.


Output the winery and variety along with the corresponding total revenue. Order records by the winery in ascending order and total revenue in descending order.

SELECT winery, variety, SUM(price) as revenue
FROM winemag_p1
GROUP by winery, variety
HAVING MIN(points) >= 90
ORDER BY winery ASC, revenue DESC

------------------------------------------------------------------------------

Calculate the total revenue from each customer in March 2019. Include only customers who were active in March 2019.


Output the revenue along with the customer id and sort the results based on the revenue in descending order.

id:
int
cust_id:
int
order_date:
datetime
order_details:
varchar
total_order_cost:
int

select SUM(total_order_cost) as revenue, cust_id
from orders
where order_date BETWEEN '2019-03-01' AND '2019-03-31'
group by cust_id

--------------------------------------------------------------------------


Find the search details for villas and houses with wireless internet access. easy

price:
float
property_type:
varchar
room_type:
varchar
amenities:
varchar
accommodates:
int
bathrooms:
int
bed_type:
varchar
cancellation_policy:
varchar
cleaning_fee:
bool
city:
varchar
host_identity_verified:
varchar
host_response_rate:
varchar
host_since:
datetime
neighbourhood:
varchar
number_of_reviews:
int
review_scores_rating:
float
zipcode:
int
bedrooms:
int
beds:
int

select * 
from airbnb_search_details
where amenities  LIKE '%Wireless Internet%' AND property_type in ('House', 'Villa')

-----------------------------------------------------------------------------------------


Find the average score for grades A, B, and C. easy
Output the results along with the corresponding grade (ex: 'A', avg(score)).

Table: los_angeles_restaurant_health_inspections

select grade, AVG(score)
from los_angeles_restaurant_health_inspections
where grade in ('A', 'B', 'C')
group by grade

------------------------------------------------------------------------------------------

09/27

Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use 
(i.e., the date-time the bike was returned). Order the results by bikes that were most recently used.

duration:
varchar
duration_seconds:
int
start_time:
datetime
start_station:
varchar
start_terminal:
int
end_time:
datetime
end_station:
varchar
end_terminal:
int
bike_number:
varchar
rider_type:
varchar
id:
int

select bike_number, MAX(end_time) as last_used
from dc_bikeshare_q1_2012
group by bike_number
order by last_used DESC

------------------------------------------------------------------------------------------
10/18
Calculate the average session duration for each session type?

user_id:
int
session_start:
datetime
session_end:
datetime
session_id:
int
session_type:
varchar

SELECT DISTINCT session_type,
       avg(session_end -session_start) OVER (PARTITION BY session_type)
       AS duration
FROM twitch_sessions

-----------------------------------------------------------------------------------------

Count the number of user events performed by MacBookPro users.
Output the result along with the event name.
Sort the result based on the event count in the descending order.

Table: playbook_events

user_id:
int
occurred_at:
datetime
event_type:
varchar
event_name:
varchar
location:
varchar
device:
varchar

WINDOW FUNCTION

SELECT distinct event_name, 
       COUNT(*) OVER (PARTITION BY event_name) as number_events
FROM playbook_events
WHERE device = 'macbook pro'
ORDER BY number_events DESC;

--------------------------------------------------------------------------------





select name, review_count
from  yelp_business
where stars = 1
group by review_count, name



--------------------------------------------------------------------------------
Find the average number of stars for each state.
Output the state name along with the corresponding average number of stars.

Table: yelp_business

WINDOW FUNCTION
select distinct state,
        avg(stars) over(partition by state) as average_star_by_state
from yelp_business


select state, avg(stars)
from yelp_business
group by state

-------------------------------------------------------------------------

Compare each employee's salary with the average salary of the corresponding department.
Output the department, first name, and salary of employees along with the average salary of that department.

id:
int
first_name:
varchar
last_name:
varchar
age:
int
sex:
varchar
employee_title:
varchar
department:
varchar
salary:
int
target:
int
bonus:
int
email:
varchar
city:
varchar
address:
varchar
manager_id:
int


select department, first_name, salary,
    avg(salary) over(partition by department) as averag_by_department
from employee

---------------------------------------------------------------------------


Find the email activity rank for each user. Email activity rank is defined by the total number of emails sent. The user with the highest number of emails sent will have a rank of 1, and so on. Output the user, total emails, and their activity rank. Order records by the total emails in descending order. Sort users with the same number of emails in alphabetical order.
In your rankings, return a unique value (i.e., a unique rank) even if multiple users have the same number of emails. For tie breaker use alphabetical order of the user usernames.

Table: google_gmail_emails


id:
int
from_user:
varchar
to_user:
varchar
day:
int

SELECT from_user,
       COUNT(*) as email_sent,
       ROW_NUMBER() OVER (ORDER BY COUNT(*) desc,from_user asc) 
FROM google_gmail_emails
GROUP BY from_user

---------------------------------------------------------------------------------

time from 10th runner
CTE + Window function

In a marathon, gun time is counted from the moment of the formal start of the race while net time is counted from the moment a runner crosses a starting line. Both variables are in seconds.


How much net time separates Chris Doe from the 10th best net time (in ascending order)? Avoid gaps in the ranking calculation. Output absolute net time difference.

Table: marathon_male

place:
int
div_tot:
varchar
num:
int
person_name:
varchar
age:
int
hometown:
varchar
pace:
int
gun_time:
int
net_time:
int


with chris_doe as
    (select net_time
    from marathon_male
    where person_name = 'Chris Doe'
    ),
    tenth_runner AS
    (select distinct net_time
        from (
            select net_time,
                dense_rank() over(order by net_time) as net_time_rank
            from marathon_male) as a
        where net_time_rank = 10
            
    )
select abs(t.net_time - c.net_time) difference
from tenth_runner t
cross join chris_doe c
    



